# Default values for app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 2

image:
  repository: overskylab/mtl-assignment
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.0.0"

imagePullSecrets: []
nameOverride: "app-api"
fullnameOverride: "app-api"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/eks-irsa-app-api
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - all
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsGroup: 65534
  runAsUser: 65534

# Represents the kind of the deployment that will be created.
# Possible values: Deployment, Rollout
kind: Deployment

strategy:
  deployment:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 0%
  # blueGreen: {}
  #   # activeService specifies the service to update with the new template hash at time of promotion.
  #   # This field is mandatory for the blueGreen update strategy.
  #   activeService: rollout-bluegreen-active
  #   # previewService specifies the service to update with the new template hash before promotion.
  #   # This allows the preview stack to be reachable without serving production traffic.
  #   # This field is optional.
  #   previewService: rollout-bluegreen-preview
  #   # autoPromotionEnabled disables automated promotion of the new stack by pausing the rollout
  #   # immediately before the promotion. If omitted, the default behavior is to promote the new
  #   # stack as soon as the ReplicaSet are completely ready/available.
  #   # Rollouts can be resumed using: `kubectl argo rollouts promote ROLLOUT`
  #   autoPromotionEnabled: false
  # canary: {}
  #   maxSurge: "25%"
  #   maxUnavailable: 0
  #   steps:
  #     - setWeight: 10
  #     - setWeight: 90
  #     - pause: { duration: 10m }

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
  hosts:
    - host: app-api.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  requests:
    memory: "200Mi"
    cpu: "20m"
  limits:
    memory: "200Mi"
    cpu: "1"

livenessProbe:
  httpGet:
    path: /health
    port: http
readinessProbe:
  httpGet:
    path: /readiness
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - podAffinityTerm:
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: app-api
          topologyKey: kubernetes.io/hostname
        weight: 100
      - podAffinityTerm:
          labelSelector:
            matchLabels:
              app.kubernetes.io/part-of: app
          topologyKey: kubernetes.io/hostname
        weight: 5
